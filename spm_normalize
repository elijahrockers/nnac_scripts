#!/usr/bin/python

import nipype.interfaces.spm as spm
import argparse
import glob
import uuid
import sys
import os

# template
scriptdir = os.path.dirname(os.path.realpath(sys.argv[0]))
mni_t2_template = os.path.join(scriptdir,'templates','SPM_EPI_TEMPLATE.nii')

# argument helper (file type)
def file_input_type(x):
    if not os.path.exists(x):
        log.error('File cannot be found: {}'.format(x))
    return os.path.abspath(x)

# print command outputs
def print_cmd(cmd):
    print "Executing:"
    print cmd.name
    for line in cmd.readlines():
        print line,

# argument parser
parser = argparse.ArgumentParser(description='normalize functional image to MNI152 2mm template')
parser.add_argument('inputfile', metavar="input.nii.gz", type=file_input_type,
                    help = 'functional input image')
parser.add_argument('outputfile', metavar="norm_output.nii.gz", type=str,
                    help = 'normalized output image')
args = parser.parse_args()

# convert input file to SPM format
tmpfile_base = str(uuid.uuid4())
tmpfile = os.path.join('/tmp', tmpfile_base)
cmd = os.popen('mri_convert {} {} -ot spm'.format(args.inputfile, tmpfile))
print_cmd(cmd)

# spm created a file for each time-frame
tmpfiles = glob.glob('{}*img'.format(tmpfile))

# create mean image
tmpfile_mean = os.path.join('/tmp', tmpfile_base + '_mean')
cmd = os.popen('fslmaths {} -Tmean {}'.format(args.inputfile,tmpfile_mean))
print_cmd(cmd)
if os.path.exists(tmpfile_mean+'.nii.gz'):
    cmd = os.popen('mri_convert {}.nii.gz {}.img -ot spm'.format(tmpfile_mean,tmpfile_mean))
    print_cmd(cmd)

# normalize 'em
norm = spm.Normalize()
norm.inputs.source = tmpfile_mean + '.img'
norm.inputs.template = mni_t2_template
norm.inputs.apply_to_files = tmpfiles
norm.inputs.write_voxel_sizes = [2,2,2]
norm.inputs.write_interp = 7
norm.inputs.write_bounding_box = [[-90,-126,-72], [90,90,108]]
norm.inputs.write_wrap = [0,1,0]
norm.run()

# grab output files
tmpfiles_output = sorted(glob.glob('/tmp/w{}???.img'.format(tmpfile_base)))

# convert outputs to single file
cmd = os.popen('fslmerge -t {} {}'.format(args.outputfile, ' '.join(tmpfiles_output)))
print_cmd(cmd)

# clean up
try:
    for t in tmpfiles:
        os.remove(t)
    for t in tmpfiles_output:
        os.remove(t)
    os.remove(tmpfile_mean+'.nii.gz')
    os.remove(tmpfile_mean+'.img')
    os.remove('pyscript_normalize.m')
except: pass

print "Normalization complete!"
print " output file --> {} ".format(args.outputfile)

